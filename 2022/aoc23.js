const input = [ '....#..', '..###.#', '#...#.#', '.#...##', '#.###..', '##.#.##', '.#..#..' ]
// const input = [ '.###....#####.#..###..##..##.######.....##.....#..#.##.#.##..##..#.#.######', '####.###...#..#...#......####.#.#..#...####....#...#....###.....###.#..#...', '##..#.#...##.##..#.##.#####..#....#...####.#.####.#...###.####..#...#.#....', '.#.###.#....##.#.##..#..###......#..#..###....#.##......#..#..#..#.###..##.', '...#.###.#.#.#####..##....###.#...###.###..#...#..##........#..#...##.#....', '.#.##.##...#.##.#.......###..#.##..#.##..######...##.####.###...#.########.', '.####.#.#.#.#...#..#..#####.#.####...#.##.###..#.....###......###...#...#.#', '..###.##..#..#.#.....#.##...#....#..##...###.###.#...####.#..#.#.##..##..#.', '#.#####..#..##..#...####.####.#..#......##..#####.####.####....###..##..#..', '.#.###..#####.#...##..#.#.##.##...####.#.##.#..##...###.#.##.#....##.####..', '..##.#..##.#.##.##.#.####..#.#.#####...#......##...#.#..###.#..#...#.####.#', '..#...#..#..#.###.###..#.#####..#..#....###...###.##.#...#..#######.##.##.#', '#######...#.....#..#...#..#.#.#..##....#..##..##.##.#.#.......###......##.#', '.##.###.###.#.##.##..##...#.###.......#..####....##..##.#....###.##...#.###', '##...#...#.##..#......##..#..#..##..#..##.#..#.#.#.#######...###.......#...', '#..##.#..#.#.#..#.###..##....##.#.#..##.##.#.##.###.##..##.#######....#.#.#', '..#....#.##...###.#...#.#######.##....#####.####....####..####.##..###..#..', '##........##.#.####..#..##.###.#..#...#..##.#.##.###...#...##.#.#..#..#..##', '.##.....##.#..#.#..#....#.#.#####.###..###...##.#.##..##..#####..##.##..##.', '#........#.#..###.######..#.##...##.#....#.#.#####.#.#.##..##.#.##..###...#', '...#..#..##.##..#.#...#.####..#...###...##.#..#....##.##.#.#..#.###.....##.', '.#.#.#.######.#..#######..##.#.#.#..##..###.##.#.##.#..#.##.##...####.##.##', '..####....####..#.....##.#.#...##..#.###..#.##.##.####...#.....#..##..###.#', '....######.##.###.##.#.###....#.#.#..#...#..##..#...####..#....#....##...##', '###.#..#..######.#...###....##...#.##.......##.#.##.#.#......##...#..#..#..', '#.#...#.###.#.##.#####.#.##..###.#..#.#.######..#..###...###..#.##....##.##', '#.#.....#..#.####.....####..#.#.###.#.....#.###....###.#.#.##..###.##....##', '#.#..##.#..###...##..#.##.....###.#.##..#.#....###....##..#..#..#.##....#..', '..###...#......##.......##.####..#....#..#....##...##..##.#.#######.#.####.', '.####.#.##.#.####...#...#.##....##...#..#..##..###.####.....###......#.##.#', '.####.###..#..#...#..####.##.....#....#..#..##......###......#..##.#.##..#.', '###.....#.###..######...###.###.#...####.##..#.#.#.##.####.###.#...#.##....', '.###.#.##....##.#####.#.......#...#..#......##.######.####.####.###.###..#.', '##.##.#..#..###.###.#.#...#.##.#..#.###.##.#.#.###..#.#...##.##.###.#.#...#', '#####.#...##.#..##.##...###..#....####..##..##...#.#..##.#.#...##..###.##.#', '.#...#..#.#.#.#.#...###.........###..#..##....###.####..#.#.#####.#.#...#.#', '..#####.#..#...#.###...###..##......##..##.##....#####..##.####..#....##.#.', '#.#.....###.#.#.###.#####.##..######.#.##..########...##.....####....###...', '..##.#.#.#..#.#.##.##.#...###....##.#.#....##.####.#.#.#.######.#.#.#.####.', '#.##.#....##.#..####......##.#.##.#.#.#########.#.##...###.#........#.#....', '....##.#..##.##.##..#.#.####..####.#..####.##.##.#....#..#.#..#####..###...', '.##.#....###....###.#..##..####.#.#....####.###.#..#.###...#...#..##.######', '.......#.#..##.#..###.#.####..####.##..#.##.####.#.###..#.#.####.#.###...##', '####.#.#...##......#..#.##.##.###.####..##...####..#...###...##.###...#...#', '#.#......#.#..#.##....##.#.##.#.#..#.#.##.##.#.##...##...#.#.#......#..#.#.', '..####.###...##..##.####....##.#.#.#.####..##..#.###.###...####..#.....#..#', '..###..#....##.#..####.#..####.##.#####..######.#...###....##.....#..##.#..', '####.###.#....###..#...#.#...#..##..#.#...#.##.##.####.##.##.##.##..#..#...', '..#.##.....#.#.#.###...#.####.#####.#.#...#.....###....##.#.##..####.#..#..', '#..##.####.####.##..##.####.#..##.#....##.#.##..###.###.####.#.##.##...##..', '#.#....#..######...##.##......#.#...#####.#.##.#..#####..#..##....#...#.###', '.#.#..##.#..##.#...##.#..####.##..#...##..#.#.#..##.####...#.......##..#.##', '#.#.#..####.##.#.#......###..##.##..#.#.##.##..##.###.#..####.#..##..###.##', '##.##.#......#.#..#.##.#..###.#.#....##..##.#..###..#........###..#.#..#.#.', '##..##..###..##.#.####.#..###.....#...####.##...#...##.######.#.#.##.#...#.', '.#..##..#...##......####...##.#.##...##.###.#.##..#..###.##.....#...#.##..#', '#..#....#...#...#...#..#.#.#..#.####....#.#.#...##.#...#..###..#####.#...#.', '.#....#..#.####.#####.#....######....#.#####....#.##.##.#...#.#....#.....#.', '#.#####..###.##.#.#..#..#...######...#.###.##.##...##.#.#.#.#.##.##...#..#.', '#.#..#.....####.##......##...##..###.#.##.#..#.#.##..#...##.##.##...#...##.', '####..##..##.##....##.##.####.....###.#####.###.#####....#####.#.#..##.#.##', '##.#..###.#.#.#######..#..##.#..#........#.##.#..#....##...#.####..#.#.....', '.#..#.######.#.###.########..#..####.##...#.#.####..##..##.#...##.#...#....', '#######...#...###.##.#.#.#....##.#..####.#.##..##.######..#.####..#..#..##.', '####.#..#####.......#...###.....##.#.########..#..#####.##.##.##.#.##.#...#', '####.#.....#.##.#.#...#####.###.####.####.####....#..#........#######.####.', '.#.#..#.#.#.#.##.###...##....##.#.#...#.#..####.#####..##...###.#.##.#..##.', '#.##.#.##.#...#..#..#..##....#.##.###...#.#..##....#....###.#..#.#####.#...', '.#.##..###.##..#######.#..#.##......###..####..##.##....#...#.#.#...#.###.#', '#..#..#.###.##......#...###.#.#..##...##.#..#.#.#.####.#....#.###..####..##', '...##.#..#...#.#.#.#...#.#...##.#..##..#...##..#..####.....##..###.#..##...', '#.####.##....####.#.#.##.##...###..#......#####.....###....#.###..##...#.##', '####..##..#..##..#...###.##..###.##..#.#..###...#...##.#.#..#...#..##.....#', '#.##.#.##.#....#.#...##.##...#.##......###...##.#.#...####....#.#...#...#.#', '#.#.##...####...##.###.#######.#.##..#.#..###..##.##.##....#.....#..#.#....' ]

let elves = []
const directions = [3, 1, 2, 0]
let direction = 3 // start with up
let proposedMoves = []

class Elf {
    constructor(x, y) {
        this.x = x
        this.y = y
        this.happy = false
        this.neighbours = [false, false, false, false]
        this.proposedPosition = undefined
        this.proposedMove = undefined
    }

    findNeighbours() {
        this.neighbours = [false, false, false, false]
        elves.forEach(elf => {
            if (Math.abs(elf.x - this.x) >= 2 || Math.abs(elf.y - this.y) >= 2) return
            if (elf.x - this.x === 1) this.neighbours[0] = true // right
            if (elf.y - this.y === 1) this.neighbours[1] = true // down
            if (elf.x - this.x === -1) this.neighbours[2] = true // left
            if (elf.y - this.y === -1) this.neighbours[3] = true // up
        })
    }

    proposeDirection() {
        if (this.neighbours.some(b => b)) {
            this.happy = false
            let proposedDirection = undefined
            directions.forEach(direction => {
                if (proposedDirection === undefined && !this.neighbours[direction]) proposedDirection = direction
            })
            return proposedDirection
        } else {
            this.happy = true
            return undefined
        }
    }

    getProposedMove() {
        const proposedDirection = this.proposeDirection()

        switch (proposedDirection) {
            case 0: this.proposedPosition = [this.x + 1, this.y]; break
            case 1: this.proposedPosition = [this.x, this.y + 1]; break
            case 2: this.proposedPosition = [this.x - 1, this.y]; break
            case 3: this.proposedPosition = [this.x, this.y - 1]; break
            default: this.proposedPosition = undefined
        }
        if (this.proposedPosition === undefined) return undefined
        return `x:${this.proposedPosition[0]} y:${this.proposedPosition[1]}`
    }

    proposeMove() {
        this.proposedMove = this.getProposedMove()
        proposedMoves.push(this.proposedMove)
    }

    move() {
        const index = proposedMoves.indexOf(this.proposedMove)
        if (proposedMoves.slice(0, index).includes(this.proposedMove) || proposedMoves.slice(index+1).includes(this.proposedMove)) return
        this.x = this.proposedPosition[0]
        this.y = this.proposedPosition[1]
    }
}

input.forEach((line, y) => {
    line.split('').forEach((char, x) => {
        if (char === '#') elves.push(new Elf(x, y))
    })
})

let round = 0

console.log(`round ${round}`)
// elves.forEach(elf => console.log(`${elf.x}, ${elf.y}`))
while (elves.some(elf => !elf.happy)) {
    round++
    elves.forEach(elf => elf.findNeighbours())
    elves.forEach(elf => elf.proposeMove())
    elves.forEach(elf => elf.move())
    console.log(`round ${round}`)
    // elves.forEach(elf => console.log(`${elf.x}, ${elf.y}`))
    // elves.forEach(elf => console.log(elf))


    proposedMoves = []
    directions.push(directions.shift())
}

const minX = elves.reduce((minX, elf) => Math.min(minX, elf.x), Infinity)
const minY = elves.reduce((minY, elf) => Math.min(minY, elf.y), Infinity)
const maxX = elves.reduce((maxX, elf) => Math.max(maxX, elf.x), -Infinity)
const maxY = elves.reduce((maxY, elf) => Math.max(maxY, elf.y), -Infinity)

console.log(`((${maxX} - ${minX} + 1) * (${maxY} - ${minY} + 1)) - ${elves.length} = ${((maxX - minX + 1) * (maxY - minY + 1)) - elves.length}`)
