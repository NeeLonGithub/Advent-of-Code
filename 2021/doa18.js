let input = [
    '[[[6,[8,3]],[2,0]],[[[9,5],[9,1]],3]]',
    '[[[9,[2,2]],[5,4]],[[[2,2],[9,6]],[7,7]]]',
    '[[[0,[3,2]],1],[[0,[2,8]],[2,[0,4]]]]',
    '[[4,4],[[[7,0],5],[3,1]]]',
    '[[5,4],1]',
    '[[[[7,6],4],9],[[9,1],9]]',
    '[[[1,[7,8]],[[7,7],[1,6]]],[1,[6,[7,1]]]]',
    '[[[[6,8],[5,6]],[[1,1],8]],[[[2,0],[3,1]],[2,[2,6]]]]',
    '[[[6,3],[3,[7,1]]],8]',
    '[[[9,4],[3,[0,6]]],[[2,[3,6]],[[9,8],[1,6]]]]',
    '[9,[0,[[0,7],2]]]',
    '[[[[8,4],7],[[9,2],[0,9]]],[[7,9],[8,[0,9]]]]',
    '[[1,1],[[5,[3,8]],[3,[4,7]]]]',
    '[[[9,[2,9]],[2,[2,9]]],[[[3,5],5],[[3,3],2]]]',
    '[[[[5,4],9],0],[[[5,7],2],[[5,2],9]]]',
    '[[2,[[1,0],[6,2]]],0]',
    '[[[3,7],[7,6]],[[[2,8],5],[3,[9,7]]]]',
    '[[2,[2,[8,8]]],[[[9,9],[1,1]],[[8,6],[0,3]]]]',
    '[[8,1],[3,5]]',
    '[[7,[[7,6],[2,0]]],4]',
    '[[5,4],[[1,3],[5,[2,8]]]]',
    '[7,9]',
    '[[[[6,9],0],[1,[5,0]]],[[[6,4],3],7]]',
    '[[[[3,7],3],[2,6]],[[0,4],[9,9]]]',
    '[[[[1,5],[5,0]],[9,4]],[[[8,3],3],[8,[3,6]]]]',
    '[[[[3,7],5],[[8,5],[1,5]]],[[0,6],[3,4]]]',
    '[[[[4,0],2],[7,[8,4]]],[0,[5,[7,8]]]]',
    '[[[[0,8],[0,4]],[9,3]],[[[5,4],[4,8]],[[1,6],[5,4]]]]',
    '[[0,[0,3]],[[3,[1,5]],[[9,6],[0,6]]]]',
    '[[9,[8,4]],[7,1]]',
    '[[[[1,9],[7,7]],9],[[6,[4,5]],[8,[3,2]]]]',
    '[5,[[2,[9,5]],[3,[4,0]]]]',
    '[[[6,2],[[1,8],5]],6]',
    '[[8,[6,[6,4]]],[0,[[9,8],7]]]',
    '[[[[6,3],[8,0]],[8,[2,7]]],8]',
    '[[[6,[3,6]],[[4,0],[4,7]]],[0,[[4,0],[4,5]]]]',
    '[[[3,[8,1]],1],[2,3]]',
    '[[[6,[7,0]],[[3,5],[3,4]]],7]',
    '[[[[8,0],3],8],[[[1,6],3],[[0,5],2]]]',
    '[[[3,7],[[9,8],8]],[[[8,4],7],[3,[1,7]]]]',
    '[[[0,5],[[5,5],[7,8]]],[9,[5,[2,2]]]]',
    '[[2,9],[[[7,4],4],[[8,0],[6,9]]]]',
    '[[[[7,8],[8,8]],0],9]',
    '[[[4,[0,6]],[[5,9],[0,1]]],[3,[6,7]]]',
    '[[[7,[6,9]],[5,[6,4]]],[[[3,9],6],[[0,1],1]]]',
    '[3,[[[6,9],7],[5,8]]]',
    '[[[3,9],[[3,5],2]],[[[2,5],[4,6]],[8,0]]]',
    '[[[9,7],3],[[[2,7],[0,9]],[3,[0,3]]]]',
    '[[3,[4,0]],[[6,6],[4,5]]]',
    '[[0,0],[[5,9],1]]',
    '[[[6,8],[2,6]],[[[1,1],3],7]]',
    '[[[4,4],[[1,0],[2,4]]],[2,6]]',
    '[[[[6,0],6],[8,[9,9]]],[[4,2],[[1,8],[5,3]]]]',
    '[[[[1,6],[4,3]],[5,5]],[[7,[9,9]],4]]',
    '[[[[6,9],7],[9,3]],[[[9,6],5],0]]',
    '[[3,[[7,2],[8,1]]],[[7,[3,0]],1]]',
    '[0,[0,[1,3]]]',
    '[[[0,5],[[6,1],[4,6]]],[[[0,4],8],[[4,5],9]]]',
    '[[[[7,5],[7,0]],[6,[7,2]]],[7,[3,[4,1]]]]',
    '[[3,3],[0,[6,2]]]',
    '[[[3,8],[[7,3],6]],[[[0,8],3],[[8,9],[2,9]]]]',
    '[[4,[[5,6],[4,0]]],[[7,[7,5]],[5,0]]]',
    '[[[[2,5],[5,4]],9],[[[6,0],[0,0]],[[5,1],8]]]',
    '[[2,[[1,7],7]],[[[4,5],[7,9]],0]]',
    '[[[0,9],[[5,4],3]],3]',
    '[[9,[[1,9],[1,6]]],[[9,[0,3]],[[8,8],[0,7]]]]',
    '[[[[7,2],4],[7,8]],[[[4,1],[3,1]],[2,5]]]',
    '[[[[1,8],3],[2,5]],[[0,[5,8]],[[1,3],[5,2]]]]',
    '[[3,9],[[9,6],[5,[7,1]]]]',
    '[1,[[3,[6,5]],[5,[2,7]]]]',
    '[[[5,8],6],[8,[[9,4],[0,4]]]]',
    '[0,[[5,[6,6]],[[7,4],[4,6]]]]',
    '[[[[6,8],2],[[1,6],[8,2]]],6]',
    '[7,2]',
    '[[3,1],7]',
    '[[[2,[9,5]],0],[[[7,3],4],8]]',
    '[[[[0,0],[4,2]],5],[[8,6],2]]',
    '[[1,[7,8]],[2,[[6,6],[5,7]]]]',
    '[[[3,[6,0]],3],[[7,[4,4]],8]]',
    '[[[9,[8,7]],[[4,2],4]],[[6,1],[[3,3],[2,2]]]]',
    '[[[8,1],[[7,4],[5,9]]],9]',
    '[[[2,[8,6]],[[9,8],2]],[[9,5],[1,[9,8]]]]',
    '[[[[6,1],[3,1]],[[4,5],1]],[[[6,4],[6,2]],2]]',
    '[[[[4,0],[0,1]],[[1,4],6]],7]',
    '[[[[8,9],[0,2]],4],[[[9,8],8],[0,[0,6]]]]',
    '[0,[[[0,9],1],7]]',
    '[[1,[[3,7],3]],[[[2,4],3],0]]',
    '[[[[7,6],3],8],[[5,5],9]]',
    '[[2,[1,3]],[[[6,7],3],[[3,8],7]]]',
    '[[[[0,6],6],6],[[5,[0,9]],[8,[2,4]]]]',
    '[4,[[[3,0],[2,5]],[[7,4],1]]]',
    '[[[[7,9],3],[0,[8,2]]],[[8,[3,4]],[[2,3],[1,6]]]]',
    '[[[3,[6,3]],5],[[3,4],2]]',
    '[[[[1,9],[0,3]],[0,8]],[[[4,2],[4,3]],[[8,9],5]]]',
    '[[[[2,8],[4,9]],[[3,5],6]],[[6,[1,5]],[0,[9,7]]]]',
    '[[6,3],[[[7,7],[1,7]],[[6,5],[0,8]]]]',
    '[[1,[1,[5,8]]],7]',
    '[[0,6],[9,[[3,4],0]]]',
    '[[[[0,2],7],9],9]',
    '[9,6]'
];

// input = ['[1,1]', '[2,2]', '[3,3]', '[4,4]', '[5,5]']  // [[[[3,0],[5,3]],[4,4]],[5,5]] // 791

function snailNumberParser(input) {
    let depth = 0
    let parsed = []

    for (let i = 0; i < input.length; i++) {
        if (input[i] === '[') {
            depth++
            continue
        }
        if (input[i] === ']') {
            depth--
            continue
        }
        if (input[i] === ',') {
            continue
        }

        let j = i
        while (!isNaN(parseInt(input[j+1]))) j++

        let num = parseInt(input.slice(i, j+1))
        parsed.push({
            value: num,
            depth: depth
        })

        i = j
    }

    return parsed
}

class SnailNumber {
    constructor(input) {
        this.snails = snailNumberParser(input)
    }

    canExploded() {
        return this.snails.some((snail) => snail.depth > 4)
    }

    explode() {
        let leftIndex = this.snails.findIndex((snail) => snail.depth > 4)
        let rightIndex = leftIndex + 1

        if (leftIndex > 0) this.snails[leftIndex - 1].value += this.snails[leftIndex].value
        if (rightIndex < this.snails.length - 1) this.snails[rightIndex + 1].value += this.snails[rightIndex].value

        this.snails[leftIndex].value = 0
        this.snails[leftIndex].depth--

        this.snails.splice(rightIndex, 1)
    }

    canSplit() {
        return this.snails.some((snail) => snail.value >= 10)
    }

    split() {
        let splitIndex = this.snails.findIndex((snail) => snail.value >= 10)

        let leftValue = Math.floor(this.snails[splitIndex].value / 2)
        let rightValue = Math.ceil(this.snails[splitIndex].value / 2)

        this.snails = [...this.snails.slice(0, splitIndex),
            { value: leftValue, depth: this.snails[splitIndex].depth + 1},
            { value: rightValue, depth: this.snails[splitIndex].depth + 1},
            ...this.snails.slice(splitIndex + 1)
        ]
    }

    resolve() {
        let didASplit = false

        do {
            didASplit = false

            while (this.canExploded()) this.explode()

            if (this.canSplit()) {
                this.split()
                didASplit = true
            }
        } while (didASplit)
    }

    add(snails) {
        this.snails.push(...snails)
        this.snails.forEach((snail) => snail.depth++)
        this.resolve()
    }

    score() {
        let scores = this.snails.map((snail) => ({...snail, score: snail.value}))

        for (let depth = 4; depth > 0; depth--) {
            for (let i = 0; i < scores.length; i++) {
                if (scores[i].depth === depth) {
                    scores[i].score = scores[i].score * 3 + scores[i+1].score * 2
                    scores[i].depth--
                    scores.splice(i+1, 1)
                    i--
                }
            }
        }

        return scores[0].score
    }
}

// part 1
// let snailNumbers = input.map((el) => new SnailNumber(el))
// let snailNumber = snailNumbers[0]
// let others = [...snailNumbers.slice(1)]
//
// others.forEach((other) => snailNumber.add(other.snails))
//
// console.log(snailNumber.score())

let size = input.length
let biggest = 0

for (let i = 0; i < size; i++) {
    for (let j = 0; j < size; j++) {
        if (i === j) continue

        let snailNumbers = input.map((el) => new SnailNumber(el))
        let snail1 = snailNumbers[i]
        let snail2 = snailNumbers[j]

        snail1.add(snail2.snails)
        biggest = Math.max(biggest, snail1.score())
    }
}

console.log(biggest)
